from qiskit.dagcircuit import DAGCircuit
from Scheduler.DagHandler import dag_to_list, hash_adj_list, chop_subdag
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit.converters import circuit_to_dag
from Utils import put_subdags_into_csv, hash_training_data

q = QuantumRegister(4, 'q')
c = ClassicalRegister(2, 'c')

circuit = QuantumCircuit(q, c)
circuit.x(q[0])
circuit.x(q[0])
circuit.x(q[1])
circuit.x(q[2])
circuit.x(q[1])
circuit.h(q[1])
circuit.h(q[2])
circuit.cx(q[2], q[1])
circuit.h(q[2])
circuit.h(q[1])
circuit.x(q[2])
circuit.x(q[3])
circuit.x(q[2])
circuit.h(q[3])
circuit.x(q[1])
circuit.x(q[1])
circuit.x(q[0])
circuit.h(q[2])
circuit.x(q[0])
circuit.x(q[2])
circuit.x(q[2])
circuit.h(q[3])
circuit.x(q[1])
circuit.x(q[1])
circuit.cx(q[1], q[2])
circuit.h(q[3])
circuit.cx(q[1], q[2])
circuit.x(q[0])
circuit.x(q[2])
circuit.x(q[1])
circuit.cx(q[3], q[0])
circuit.cx(q[3], q[0])
circuit.h(q[1])
circuit.x(q[0])
circuit.cx(q[2], q[3])
circuit.x(q[3])
circuit.x(q[0])
circuit.h(q[1])
circuit.x(q[1])
circuit.x(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])

circuit.x(q[3])
circuit.x(q[0])
circuit.h(q[1])
circuit.x(q[1])
circuit.x(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])


circuit.x(q[3])
circuit.x(q[0])
circuit.h(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[1])
circuit.x(q[1])
circuit.x(q[1])



circuit.x(q[3])
circuit.x(q[0])
circuit.h(q[1])
circuit.x(q[1])
circuit.x(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])



circuit.x(q[3])
circuit.x(q[0])
circuit.h(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])



circuit.x(q[3])
circuit.x(q[0])
circuit.h(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[1])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])



circuit.x(q[3])
circuit.x(q[0])
circuit.h(q[1])
circuit.x(q[1])
circuit.x(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.x(q[3])
circuit.x(q[1])
circuit.x(q[1])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])

circuit.x(q[1])
circuit.x(q[1])
circuit.h(q[1])
circuit.x(q[1])

circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.cx(q[1], q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.x(q[3])
circuit.h(q[3])
circuit.x(q[2])
circuit.cx(q[0], q[3])
circuit.x(q[2])
circuit.h(q[2])
circuit.x(q[2])
circuit.x(q[2])
circuit.x(q[2])

dag = circuit_to_dag(circuit)
adj_list = dag_to_list(dag)


optimizations = []

optimizations.append("no_opt")
optimizations.append("same_opt")
optimizations.append("hadam_opt")

chopped_list = list(chop_subdag(adj_list))

#put_subdags_into_csv("training.csv", chopped_list)
hash_training_data("training.csv", "hashed_training.csv", 4)
